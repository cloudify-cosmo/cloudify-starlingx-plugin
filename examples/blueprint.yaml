tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint can be used to enroll both system controllers and subclouds.
  To discover a system controller's subclouds, use this blueprint to enroll
  the system controller, and then execute the discover_and_deploy workflow.
  To manually enroll a subcloud, provide the URL endpoint of the subcloud,
  and set region-name input to the name of the subcloud.

imports:
  - https://cloudify.co/spec/cloudify/5.2.0/types.yaml
  - plugin:cloudify-starlingx-plugin

blueprint_labels:

  csys-obj-type:
    values:
    - environment

  csys-env-type:
    values:
    - wrcp

labels:

  # These values are used to identify sites and parent deployments.
  # They will be filled automatically during installation of the blueprint.
  # For manual subcloud enrollment, the values need to be filled manually
  # in the UI.

  csys-obj-type:
    values:
     - environment

  csys-env-type:
    values: []

  csys-obj-parent:
    values: []

  csys-location-name:
    values: []

  csys-location-lat:
    values: []

  csys-location-long:
    values: []

  csys-wrcp-services:
    values: []

inputs:

  auth_url:
    type: string
    description: >
      The auth URL of the WRCP API endpoint. E.g. http://10.0.2.2:5000/v3.
      The IP may be and IPv4 or IPv6 IP.
      If no protocol is provided, e.g. http:// or https://, then install will fail.
      If no port is provided, e.g. :5000, then install will fail.
      If no endpoint path is provided, e.g. /v3, then install will fail.

  user_secret:
    type: string
    description: >
      The name of the secret that contains the admin username,
      which will be used to authenticate with the StarlingX endpoint.
    default: starlingx_username

  password_secret:
    type: string
    description: >
      The name of the secret that contains the admin password,
      which will be used to authenticate with the StarlingX endpoint.
    default: starlingx_api_key

  region_name:
    type: string
    description: >
      The region that will be provided to starlingX API.
      RegionOne is used for System Controllers.
      Subclouds require the subcloud name to be provided.
    default: RegionOne

  cacert_secret:
    type: string
    description: >
      The name of the secret that contains the root CA certificate,
      which will be used to validate with the StarlingX endpoint certificate.
      The secret must exist even if you are using http.
      If you are using http, provide an empty string for the secret value.
    default: starlingx_cacert

  insecure:
    type: boolean
    description: >
      Disable certificate validation of the StarlingX endpoint certificate.
    default: false

dsl_definitions:

  client_config: &client_config
    auth_url: { get_input: auth_url }
    username: { get_secret: { get_input: user_secret } }
    api_key: { get_secret: { get_input: password_secret } }
    project_name: admin
    user_domain_name: Default
    project_domain_name: Default
    region_name: { get_input: region_name }
    insecure: { get_input: insecure }
    cacert: { get_secret: { get_input: cacert_secret } }

node_templates:

  wrcp:
    type: cloudify.nodes.starlingx.WRCP
    properties:
      client_config: *client_config

capabilities:

  wrcp-ip:
    description: The external OAM address of the Cloud Platform.
    value: { get_input: auth_url }

  wrcp-user-secret:
    description: The secret containing the Cloud Platform admin username.
    value: { get_input: user_secret }

  wrcp-password-secret:
    description: The secret containing the Cloud Platform admin password.
    value: { get_input: password_secret }

  wrcp-cacert-secret:
    description: The secret containing the Cloud Platform root CA certificate.
    value: { get_input: cacert_secret }

  wrcp-insecure:
    description: A boolean for insecure handling of HTTPS.
    value: { get_input: insecure }

  k8s-ip:
    description: The public endpoint of the Kubernetes cluster.
    value: { get_attribute: [ wrcp, k8s_ip ] }

  k8s-service-account-token:
    description: The kubernetes-admin service account for admin access to the Kubernetes cluster.
    value: { get_attribute: [ wrcp, k8s_service_account_token ] }

  k8s-cert:
    description: The kubernetes-admin client certificate for admin access to the Kubernetes cluster.
    value: { get_attribute: [ wrcp, k8s_cert ] }

  openstack-ip:
    description: The endpoint of the OpenStack public endpoint (if installed).
    value: { get_attribute: [ wrcp, openstack_ip ] }

  openstack-key:
    description: The access key of the OpenStack public endpoint (if installed).
    value: { get_attribute: [ wrcp, openstack_key ] }
